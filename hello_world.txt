-Personagem-
Atributos:
• nome - Nome do personagem;
• pontosDeVida - A saude atual do personagem;
• forca - O atributo de for ̧ca, usado em combate.
Métodos:
• Construtor para inicializar os atributos;
• receberDano() - Reduz os pontos de vida com base no dano recebido;
• exibirStatus() - Imprime as informacoes do personagem (nome, vida, etc.).
• atacar(Personagem alvo) (M ́etodo Abstrato) - Um contrato que obriga todas as classes filhas a 
implementar sua pr ́opria logica de ataque.

-Heroi-
Atributos Adicionais:
• nivel - O nivel atual do heroi;
• experiencia - Pontos de experiencia acumulados.
Metodos Adicionais:
• Construtor que utiliza o super() para inicializar os atributos da classe Personagem;
• ganharExperiencia() - Adiciona pontos de experiencia ao heroi;
• exibirStatus() - Sobrescreve (override) o metodo da classe pai para incluir o nivel e a experiencia.

• usarHabilidadeEspecial(Personagem alvo) |Metodo Abstrato| - Contrato que obriga as classes 
concretas de herois a terem uma habilidade  ́unica.

-Classes Concretas de Herói-
Implemente duas classes concretas de heroi.
Adicione um atributo  ́unico para cada uma (ex: furia para um Guerreiro, precisao para um Arqueiro).
Forneça a implementaçao concreta para os metodos abstratos atacar() e usarHabilidadeEspecial().
Nesse lab a implementaçao pode ser um simples System.out.println descrevendo a açao.

-Monstro-
Atributos Adicionais:
• xpConcedido - Experiencia que o monstro concede ao ser derrotado.
Metodos Adicionais:
• Construtor que utiliza o super() para inicializar os atributos da classe Personagem;
• exibirStatus() - Sobrescreve o m ́etodo para incluir o XP que ser ́a concedido.

-Classes Concretas de Monstro-
Um tipo de inimigo que herda de Monstro.
Implemente pelo menos duas classes concretas de Monstro Ex: Goblin, Esqueleto, Fantasma etc.
com atributos e comportamentos  ́unicos entre si.
Forneça a implementaçao concreta para o metodo abstrato atacar().